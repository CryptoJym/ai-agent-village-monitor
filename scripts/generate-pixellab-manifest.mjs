#!/usr/bin/env node
import fs from 'node:fs/promises';
import path from 'node:path';
import process from 'node:process';

const __dirname = path.dirname(new URL(import.meta.url).pathname);
const FRONTEND_ROOT = path.resolve(__dirname, '..', 'packages', 'frontend');
const PUBLIC_ROOT = path.join(FRONTEND_ROOT, 'public', 'assets');
const OUTPUT_PATH = path.join(FRONTEND_ROOT, 'src', 'assets', 'pixellabMetadata.ts');

const SUPPORTED_CATEGORIES = ['agents', 'emotes', 'bug-bots', 'houses'];

async function readJson(filePath) {
  try {
    const raw = await fs.readFile(filePath, 'utf8');
    return JSON.parse(raw);
  } catch (err) {
    if (process.env.DEBUG_PIXELLAB_MANIFEST === 'true') {
      console.warn(`Failed to read ${filePath}:`, err);
    }
    return null;
  }
}

async function collectCategory(category) {
  const baseDir = path.join(PUBLIC_ROOT, category);
  let entries = [];
  try {
    entries = await fs.readdir(baseDir, { withFileTypes: true });
  } catch (err) {
    if (process.env.DEBUG_PIXELLAB_MANIFEST === 'true') {
      console.warn(`Skipping category ${category}:`, err);
    }
    return {};
  }

  const result = {};
  for (const entry of entries) {
    if (!entry.isDirectory()) continue;
    const key = entry.name;
    const metadataPath = path.join(baseDir, key, 'metadata.json');
    const metadata = await readJson(metadataPath);
    if (!metadata?.frames?.animations) continue;
    const animations = metadata.frames.animations;
    const cleaned = {};
    for (const [animationName, directions] of Object.entries(animations)) {
      const directionCounts = {};
      for (const [direction, frames] of Object.entries(directions ?? {})) {
        directionCounts[direction] = Array.isArray(frames) ? frames.length : 0;
      }
      cleaned[animationName] = directionCounts;
    }
    result[key] = cleaned;
  }
  return result;
}

async function buildManifest() {
  const manifest = {};
  for (const category of SUPPORTED_CATEGORIES) {
    manifest[category] = await collectCategory(category);
  }
  const fileContents = `// AUTO-GENERATED by scripts/generate-pixellab-manifest.mjs\n// Do not edit manually.\n\nexport const pixellabAnimationMetadata = ${JSON.stringify(
    manifest,
    null,
    2,
  )} as const;\n\nexport type PixellabAnimationMetadata = typeof pixellabAnimationMetadata;\n`;

  await fs.mkdir(path.dirname(OUTPUT_PATH), { recursive: true });
  await fs.writeFile(OUTPUT_PATH, fileContents, 'utf8');
}

(async () => {
  try {
    await buildManifest();
    process.exit(0);
  } catch (error) {
    console.error('Failed to generate pixellab metadata:', error);
    process.exit(1);
  }
})();
